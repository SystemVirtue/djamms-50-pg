import { SearchResult } from '../components/VideoCard';
import { parseDuration } from '../lib/utils';

export interface YouTubeSearchOptions {
  query: string;
  maxResults?: number;
  pageToken?: string;
}

export interface YouTubeSearchResponse {
  items: SearchResult[];
  nextPageToken?: string;
  prevPageToken?: string;
  totalResults: number;
}

/**
 * Calculate "official" score for a video
 * Higher score = more likely to be official content
 * 
 * Scoring factors:
 * - VEVO channel: +3 points
 * - "Official" in title: +2 points
 * - Artist name in channel: +1 point
 * - Verified channel: +1 point
 */
function calculateOfficialScore(
  title: string,
  channelTitle: string
): number {
  let score = 0;

  // VEVO channels are always official
  if (channelTitle.toLowerCase().includes('vevo')) {
    score += 3;
  }

  // Official in title
  if (/official/i.test(title)) {
    score += 2;
  }

  // Topic channels (auto-generated by YouTube for official music)
  if (channelTitle.includes(' - Topic')) {
    score += 2;
  }

  // Artist name similarity (basic check)
  const titleWords = title.toLowerCase().split(/\s+/);
  const channelWords = channelTitle.toLowerCase().split(/\s+/);
  const overlap = titleWords.filter(word => channelWords.includes(word)).length;
  if (overlap >= 2) {
    score += 1;
  }

  return score;
}

export class YouTubeSearchService {
  private apiKey: string;
  private baseUrl = 'https://www.googleapis.com/youtube/v3';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  /**
   * Search for YouTube videos
   */
  async search(options: YouTubeSearchOptions): Promise<YouTubeSearchResponse> {
    const { query, maxResults = 20, pageToken } = options;

    try {
      // Search for videos
      const searchParams = new URLSearchParams({
        part: 'snippet',
        q: query,
        type: 'video',
        videoCategoryId: '10', // Music category
        maxResults: maxResults.toString(),
        key: this.apiKey,
        ...(pageToken && { pageToken })
      });

      const searchResponse = await fetch(
        `${this.baseUrl}/search?${searchParams}`
      );

      if (!searchResponse.ok) {
        throw new Error(`YouTube API error: ${searchResponse.statusText}`);
      }

      const searchData = await searchResponse.json();

      // Get video IDs
      const videoIds = searchData.items
        .map((item: any) => item.id.videoId)
        .join(',');

      // Get video details (duration, etc.)
      const detailsParams = new URLSearchParams({
        part: 'contentDetails,snippet',
        id: videoIds,
        key: this.apiKey
      });

      const detailsResponse = await fetch(
        `${this.baseUrl}/videos?${detailsParams}`
      );

      if (!detailsResponse.ok) {
        throw new Error(`YouTube API error: ${detailsResponse.statusText}`);
      }

      const detailsData = await detailsResponse.json();

      // Combine search results with video details
      const items: SearchResult[] = detailsData.items.map((video: any) => {
        const snippet = video.snippet;
        const duration = parseDuration(video.contentDetails.duration);
        const officialScore = calculateOfficialScore(
          snippet.title,
          snippet.channelTitle
        );

        return {
          id: video.id,
          title: snippet.title,
          channelTitle: snippet.channelTitle,
          thumbnailUrl: snippet.thumbnails.high?.url || snippet.thumbnails.medium?.url,
          duration,
          officialScore
        };
      });

      return {
        items,
        nextPageToken: searchData.nextPageToken,
        prevPageToken: searchData.prevPageToken,
        totalResults: searchData.pageInfo.totalResults
      };
    } catch (error) {
      console.error('YouTube search error:', error);
      throw error;
    }
  }

  /**
   * Get video details by ID
   */
  async getVideoById(videoId: string): Promise<SearchResult | null> {
    try {
      const params = new URLSearchParams({
        part: 'snippet,contentDetails',
        id: videoId,
        key: this.apiKey
      });

      const response = await fetch(`${this.baseUrl}/videos?${params}`);

      if (!response.ok) {
        throw new Error(`YouTube API error: ${response.statusText}`);
      }

      const data = await response.json();

      if (data.items.length === 0) {
        return null;
      }

      const video = data.items[0];
      const snippet = video.snippet;
      const duration = parseDuration(video.contentDetails.duration);
      const officialScore = calculateOfficialScore(
        snippet.title,
        snippet.channelTitle
      );

      return {
        id: video.id,
        title: snippet.title,
        channelTitle: snippet.channelTitle,
        thumbnailUrl: snippet.thumbnails.high?.url || snippet.thumbnails.medium?.url,
        duration,
        officialScore
      };
    } catch (error) {
      console.error('YouTube get video error:', error);
      throw error;
    }
  }
}

export default YouTubeSearchService;
