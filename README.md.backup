# djamms-prototype

# created with a single prompt (refer "DJAMMS_Specifications.doc" in repo)
# generated by Claude Sonnet 4.5 (Preview) Agent in VSC 

A production-ready YouTube-based music player system for bars/venues, built with TypeScript, React, Vite, and AppWrite.

## Features

- **Magic-link + JWT Authentication**: Passwordless authentication with 7-day JWT tokens
- **Master Player System**: Single active player per venue with heartbeat monitoring
- **Dual YouTube iframes**: Smooth 5-second crossfading between tracks
- **Real-time Synchronization**: Live queue updates via AppWrite Realtime API
- **Priority Queue**: Paid song requests interrupt main queue
- **Venue-scoped Permissions**: Role-based access control (admin/staff/viewer)
- **FFmpeg Pre-processing**: Automatic silence detection for accurate track endings

## Project Structure

```
djamms-prototype/
├── apps/                    # Frontend applications
│   ├── landing/            # Public landing page (www.djamms.app)
│   ├── auth/               # Authentication app (auth.djamms.app)
│   ├── dashboard/          # User dashboard (dashboard.djamms.app/[venueId])
│   ├── player/             # Master player (player.djamms.app/[venueId])
│   ├── admin/              # Admin console (admin.djamms.app/[venueId])
│   └── kiosk/              # Public kiosk (kiosk.djamms.app/[venueId])
├── packages/               # Shared code
│   ├── shared/             # Types and utilities
│   ├── appwrite-client/    # AppWrite SDK configuration
│   └── youtube-player/     # YouTube player logic
├── scripts/                # Utility scripts
│   └── schema-manager/     # Database schema management
├── functions/              # AppWrite Cloud Functions
│   └── appwrite/           # Node.js functions
└── tests/                  # Unit and E2E tests
```

## Setup

### 1. Install Dependencies

```bash
npm install
```

### 2. Environment Configuration

```bash
cp .env.example .env
```

Edit `.env` with your configuration:

```env
# AppWrite Configuration
VITE_APPWRITE_ENDPOINT=https://appwrite.yourdomain.com/v1
VITE_APPWRITE_PROJECT_ID=your_project_id
VITE_APPWRITE_DATABASE_ID=djamms_production
VITE_APPWRITE_API_KEY=your_admin_key

# Authentication
VITE_JWT_SECRET=your_jwt_secret_change_this
VITE_ALLOW_AUTO_CREATE_USERS=false

# YouTube API (optional for kiosk search)
VITE_YOUTUBE_API_KEY=your_youtube_api_key

# Features
VITE_ENABLE_STRIPE_PAYMENTS=false
```

### 3. Set Up AppWrite

#### Option A: AppWrite Cloud
1. Create a project at [cloud.appwrite.io](https://cloud.appwrite.io)
2. Copy your project ID and API key to `.env`
3. Run the schema manager to create collections:

```bash
npm run create-collections
```

#### Option B: Self-Hosted AppWrite
1. Install AppWrite: https://appwrite.io/docs/installation
2. Create a project and database
3. Run the schema manager

### 4. Verify Database Schema

```bash
# Dry run (check only, no changes)
npm run schema:check

# Apply missing collections/attributes
npm run schema:apply

# Clean invalid documents (requires --confirm)
npm run schema:clean
```

## Development

### Run Individual Apps

```bash
# Player app (port 3001)
npm run dev:player

# Auth app (port 3002)
npm run dev:auth

# Admin app (port 3003)
npm run dev:admin

# Kiosk app (port 3004)
npm run dev:kiosk
```

### Build for Production

```bash
# Build all apps
npm run build

# Build specific app
npm run build:player
```

## Testing

### Unit Tests (Vitest)

```bash
npm run test:unit
```

Tests include:
- Authentication flow (magic link, JWT validation)
- Player registry (master registration, heartbeats)
- Queue management

### E2E Tests (Playwright)

```bash
# Run E2E tests
npm run test:e2e

# Run with UI
npm run test:e2e:ui
```

Tests include:
- Auth callback flow
- Player autoplay behavior
- Track advancement
- Real-time synchronization (requires AppWrite secrets)

**Note**: E2E tests that require a real AppWrite instance are guarded by environment variables and will be skipped if secrets are not provided.

## CI/CD

### GitHub Actions

The project includes a CI workflow (`.github/workflows/ci.yml`) that:

1. **Unit Tests**: Run on all pushes/PRs
2. **E2E Tests**: Run only if AppWrite secrets are configured
3. **Build**: Compile all apps

### Required Secrets

Configure these in your GitHub repository settings:

```
APPWRITE_ENDPOINT
APPWRITE_PROJECT_ID
APPWRITE_DATABASE_ID
APPWRITE_API_KEY
JWT_SECRET
```

## Deployment

### Frontend Apps

Deploy to Vercel, Netlify, or any static hosting:

```bash
npm run build
```

Configure subdomains:
- `auth.djamms.app` → `apps/auth/dist`
- `player.djamms.app` → `apps/player/dist`
- `admin.djamms.app` → `apps/admin/dist`
- `kiosk.djamms.app` → `apps/kiosk/dist`

### AppWrite Functions

Deploy functions to AppWrite:

```bash
cd functions/appwrite
appwrite deploy function
```

Functions require Docker environment with:
- Node.js 18+
- yt-dlp
- FFmpeg

## Architecture

### Player System

1. **Master Player Registration**: Device requests master status with deviceId (browser fingerprint)
2. **Heartbeat**: Active player sends heartbeat every 25 seconds
3. **Expiry**: Master status expires after 2 minutes without heartbeat
4. **Conflict Resolution**: If master exists, show PlayerBusyScreen with retry/viewer/admin options

### Queue Management

- **Main Queue**: Loops continuously (when track ends, moves to end of queue)
- **Priority Queue**: Paid requests play first, then discarded
- **Now Playing**: Current track with countdown timer (synced from server `remaining - 1s`)

### Crossfading

1. Load next track in secondary YouTube iframe (hidden)
2. Calculate fade start time: `track.duration - track.realEndOffset - 5s`
3. Fade primary volume 100→0 and secondary 0→100 over 50 steps (5 seconds)
4. Swap primary/secondary iframes

### Real-time Sync

- **Channel**: `databases.{databaseId}.collections.queues.documents`
- **Events**: `update` when queue changes
- **Clients**: Admin/kiosk subscribe and update UI
- **Polling**: Master player polls 4x per song for drift correction (>5s resync)

## LocalStorage Keys

- `authToken`: JWT token (7-day expiry)
- `userData`: User object (role, email, venueId, autoplay)
- `deviceId`: Browser fingerprint
- `isMasterPlayer_{venueId}`: Master status flag
- `djammsQueue_{venueId}`: Cached queue state
- `djammsAutoplay`: Autoplay preference (true/false)

## Troubleshooting

### Player Won't Start

1. Check console for errors
2. Verify `.env` variables are set
3. Run `npm run schema:check` to verify database
4. Clear localStorage and retry

### Compilation Errors

The project uses TypeScript path aliases. Install dependencies first:

```bash
npm install
```

### AppWrite Connection Failed

1. Verify `VITE_APPWRITE_ENDPOINT` is accessible
2. Check firewall/CORS settings
3. Ensure API key has proper permissions

## License

MIT

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Run tests: `npm run test:unit && npm run test:e2e`
5. Submit a pull request

## Support

For issues and questions:
- GitHub Issues: https://github.com/yourusername/djamms-prototype/issues
- Documentation: https://github.com/yourusername/djamms-prototype/wiki
